function [tm,ids,LOG,tn,cn] = incidences(torg)% Detection of abnormal beats.% torg/tm  = normal beats series (in seconds)% ids = beat indices following each incidence% LOG = Report of the analysis% Tol = Tolerance to ectopic beats (1, default).% Limitation = 1 or 0 (default) always perfom HRV analysis independently of%   physiological limitation in the variation of hear rate.% (c) Javier Mateo, 7-Dic-2001. Modified by Eduardo Gil, 30-Dic-2009.% Modified: 6JUN2011 Rute start = clock;NL = newline;skipCounter = 0; % Avoid infinite loopskipOffset = 0;tn = torg(:);% Delete backwards timetn = [tn(diff(tn)>0); tn(end)];tn = unique(tn);cn = repmat('c',length(tn),1);% Variation of Heart Raterr = diff(tn);% Compute thresholdthreshold = computeThreshold(rr);% Initialize logLOG = ['Report of beat series anomalies',NL];LOG = [LOG,'============================================',NL,NL];% Find absolute variation above thresholdidx = find(rr>threshold)-1;% Incidences on first three pulses are not allowedwhile ~isempty(idx) && idx(1)<3    tn = tn(2:end);    cn = cn(2:end);    threshold = threshold(2:end);    rr = diff(tn);    idx = find(rr>threshold)-1;endwhile ~isempty(idx)    id = idx(1+skipOffset);    N = 1;    T = threshold(id);    C = 0;    while C==0 && length(tn)>id+N+2        N = N+1;        [C,tm] = check(tn(max([1 id-2]):id+N+2),T);    end    if C        tn = [tn(1:id-2+C); tm; tn(id+N-2+C:end)];        cn = [cn(1:id-2+C); repmat('X',length(tm),1); cn(id+N-2+C:end)];        threshold = ...            [threshold(1:id-2+C); repmat(T,length(tm),1); threshold(id+N-2+C:end)];    else        tn = tn(1:end-1);        cn = cn(1:end-1);        threshold = threshold(1:length(tn)-1);    end    rr = diff(tn);    idx = find(rr>threshold)-1;        if numel(idx)==skipOffset, break; end    if idx(1+skipOffset) == id        skipCounter = skipCounter+1;        if skipCounter > 10 % Skip incidence to avoid infinite loop            skipOffset = skipOffset+1;            skipCounter = 0;        end    end    if numel(idx)==skipOffset, break; endendid = find(cn=='c');tm = tn(id);ids = find(diff(id)>1)+1;procdur = etime(clock,start);LOG = [LOG,'Position of first original beat: ',num2str(torg(1)),' s.',NL];LOG = [LOG,'Position of first normal beat: ',num2str(tm(1)),' s.',NL];LOG = [LOG,'Position of last original beat: ',num2str(torg(end)),' s.',NL];LOG = [LOG,'Position of last normal beat: ',num2str(tm(end)),' s.',NL];LOG = [LOG,'Number of original beats: ',num2str(length(torg)),NL];LOG = [LOG,'Number of normal beats: ',num2str(length(tm)),NL];LOG = [LOG,'Number of anomalies: ',num2str(length(ids)),NL];LOG = [LOG,'Maximum interval between normal beats: ',num2str(max(diff(tm))),' s.',NL];LOG = [LOG,'Mean Heart Rate: ',num2str(mean(diff(tn)),2),' s.',NL];LOG = [LOG,'Length of anomalies processing: ',num2str(procdur,2),' s.'];tm = unique(tm);tn = unique(tn);endfunction [C,tm] = check(tt,T)for i = 1:3    xi = tt(i+1);    yi = xi-tt(i);    xf = tt(end-3+i);    yf = xf-tt(end-4+i);    tm{i} = tgap(xi,yi,xf,yf);    tp = [tt(i:i+1);tm{i};tt(end-3+i)];    dd(i) = max(abs(diff(1./diff(tp))));end[dd,C] = min([T,dd]);C = C-1;if C>0    tm = tm{C}(1:end-1);else    tm = [];endendfunction [xm,ym] = tgap(x0,y0,xf,yf)m = (yf-y0)/(xf-x0);g = 1/(1-m);k = 1;b0 = y0-m*x0;b1 = (xf-yf-x0*g^k)/sum(g.^(1:k));t = tic;while 1    k = k+1;    b2 = (xf-yf-x0*g^k)/sum(g.^(1:k));    db0 = abs(b1-b0);    db1 = abs(b2-b0);    if (db0-db1)<0 || toc(t)>3        break;    end    b1 = b2;endN = k-1;xm(1) = (x0+b1)*g;ym(1) = xm(1)-x0;for i = 2:N    xm(i,1) = g*(xm(i-1)+b1);    ym(i,1) = xm(i)-xm(i-1);endend